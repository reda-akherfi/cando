PROJECT: Cando ‚Äì Productivity Desktop App

SUMMARY:
Cando is a Python-based cross-platform desktop application using PySide6. It organizes work via Projects, Tasks, Tags, and Timers. The design is modular and AI-agent-friendly. One key feature is data visualization to support time analysis and productivity insights.

MODULES:
- app/
  - main.py: Launches the application. ‚úÖ IMPLEMENTED
  - ui/: Contains layout code from Qt Designer (or manually written). ‚úÖ IMPLEMENTED
  - views/: Manages the visual interface (widgets, windows). ‚úÖ IMPLEMENTED
  - models/: Defines core data entities using @dataclass. ‚úÖ IMPLEMENTED
  - controllers/: Encapsulates app logic (e.g. timer tracking). ‚úÖ IMPLEMENTED
  - services/: Intended for analytics, persistence, reminders. ‚úÖ FULLY IMPLEMENTED
  - utils/: General helpers (e.g. mock data, formatting). ‚úÖ IMPLEMENTED

ENTITIES:
1. Project:
   - id, name, description, task list (by ID) ‚úÖ IMPLEMENTED
2. Task:
   - id, project_id, name, due_date, completed ‚úÖ IMPLEMENTED
3. Tag:
   - id, name, linked_type ("project" or "task"), linked_id ‚úÖ IMPLEMENTED
4. Timer:
   - id, task_id, start, end, type ("maduro", "countdown", "stopwatch") ‚úÖ IMPLEMENTED

TIMER DESIGN:
- A new Timer instance is created for every uninterrupted task period. ‚úÖ IMPLEMENTED
- Switching tasks ends the current timer and starts a new one, even if the same UI timer is shown. ‚úÖ IMPLEMENTED
- This allows accurate backend logging and seamless frontend UX. ‚úÖ IMPLEMENTED

VISUALIZATION SYSTEM:
- Built using matplotlib embedded in PySide6 widgets. ‚úÖ IMPLEMENTED
- All charts will be placed in dedicated tabs or panels. ‚úÖ IMPLEMENTED
- Visualizations planned:
  - Time spent per tag ‚úÖ IMPLEMENTED (analytics service)
  - Time spent per project ‚úÖ IMPLEMENTED (analytics service + chart widget)
  - Daily, weekly, and monthly productivity trends ‚úÖ IMPLEMENTED (analytics service + chart widget)
  - Timer type usage statistics ‚úÖ IMPLEMENTED (analytics service + chart widget)
- Visual components are separated from logic and data. ‚úÖ IMPLEMENTED
- Visualization widgets consume raw data from `services.analytics` (planned). ‚úÖ IMPLEMENTED
- Charts are dynamically updated when data changes. ‚úÖ IMPLEMENTED

UI:
- PySide6 QMainWindow ‚úÖ IMPLEMENTED
- Main window currently shows label and buttons ‚úÖ IMPLEMENTED
- To be expanded with tabbed views: ‚úÖ IMPLEMENTED
  - Dashboard (charts) ‚úÖ IMPLEMENTED (with real data and charts)
  - Projects and tasks ‚úÖ IMPLEMENTED (with CRUD functionality)
  - Timer controls ‚úÖ IMPLEMENTED (with database persistence)
  - Settings ‚úÖ IMPLEMENTED (with data management)

AI INTEGRATION GUIDELINES:
- Logic and data are fully decoupled from the UI. ‚úÖ IMPLEMENTED
- All model classes are plain dataclasses. ‚úÖ IMPLEMENTED
- All logic is grouped in `controllers/` and `services/`, designed for testability and predictability. ‚úÖ IMPLEMENTED
- UI handles only display and input. ‚úÖ IMPLEMENTED
- Ideal structure for LLM agent-based coding or testing. ‚úÖ IMPLEMENTED

CURRENT IMPLEMENTATION STATUS:
‚úÖ COMPLETED:
- Basic application structure and architecture
- All data models (Project, Task, Tag, Timer)
- Timer controller with start/stop functionality
- Tabbed main window interface
- Analytics service with data analysis methods
- Chart widgets for data visualization
- Mock data generation
- Proper documentation and docstrings
- Pylint configuration for Qt compatibility
- SQLite database with SQLAlchemy ORM ‚úÖ NEW
- Complete CRUD operations for all entities ‚úÖ NEW
- Data persistence layer ‚úÖ NEW
- Real-time chart updates with database data ‚úÖ NEW
- Sample data initialization ‚úÖ NEW
- Database management in Settings tab ‚úÖ NEW

üîÑ IN PROGRESS:
- Enhanced UI for better user experience
- More sophisticated timer interface

‚ùå TODO:
- Add full timer interface with multiple views (maduro, countdown, stopwatch)
- Improve dashboard UI and themes
- Add data export functionality
- Implement keyboard shortcuts
- Add system tray integration
- Add notifications
- Add data backup/restore
- Add theme support
- Add data import functionality
- Add multi-language support

ENHANCEMENT SUGGESTIONS:
1. **Enhanced Timer Interface**: Add dedicated timer types with specific UI for each
2. **Real-time Updates**: Add signal/slot mechanism for live chart updates
3. **Export Functionality**: Add CSV/PDF export for productivity reports
4. **Keyboard Shortcuts**: Implement global hotkeys for timer control
5. **System Tray**: Add system tray icon with quick timer access
6. **Data Backup**: Implement automatic backup and restore functionality
7. **Themes**: Add dark/light theme support
8. **Notifications**: Add desktop notifications for timer events
9. **Data Import**: Support importing data from other productivity tools
10. **Multi-language**: Add internationalization support

DATABASE IMPLEMENTATION:
‚úÖ COMPLETED:
- SQLite database with SQLAlchemy ORM
- Complete database models with relationships
- CRUD operations for all entities
- Data adapters for model conversion
- Database service with session management
- Sample data initialization
- Database management utilities

ENVIRONMENT:
- Python 3.11.9 (Windows 11)
- PySide6==6.6.3
- Other dependencies: matplotlib, pandas, sqlalchemy ‚úÖ VERIFIED
- Entry point: `python run.py` ‚úÖ IMPLEMENTED

DEVELOPMENT NOTES:
- Pylint configuration optimized for Qt development
- All modules include proper docstrings
- Code follows PEP 8 standards with Qt-specific exceptions
- Modular architecture supports easy testing and AI-assisted development
- Database file: `cando.db` (SQLite)
- Sample data automatically initialized on first run
